{"version":3,"sources":["main.js"],"names":["map","markers","placeMarkers","initMap","google","maps","Map","document","getElementById","center","lat","lng","zoom","styles","featureType","elementType","stylers","color","weight","hue","lightness","saturation","visibility","mapTypeId","textInput","searchBox","places","SearchBox","addListener","setBounds","getBounds","InfoWindow","searchBoxPlaces","this","addEventListener","searchPlaces","hideMarkers","getPlaces","length","markersForPlaces","bounds","PlacesService","textSearch","query","value","results","status","PlacesServiceStatus","OK","i","setMap","LatLngBounds","place","icon","url","size","Size","origin","Point","anchor","scaledSize","marker","Marker","animation","Animation","DROP","title","name","position","geometry","location","id","place_id","placeInfoWindow","console","log","getPlacesDetails","push","viewport","union","extend","fitBounds","infowindow","getDetails","placeId","innerHTML","formatted_address","formatted_phone_number","opening_hours","weekday_text","photos","getUrl","maxHeight","maxWidth","setContent","open"],"mappings":"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","file":"../app.js","sourcesContent":["var map;\n\nvar markers = [];\n\nvar placeMarkers = [];\n\nfunction initMap() {\n// Array of styles to be used in the map\n    var styles = [\n        {\n            featureType: 'administrative',\n            elementType: 'labels.text.stroke',\n            stylers: [\n                {color: '$white'},\n                {weight: 4}\n            ]\n        },\n        {\n            featureType: 'administrative',\n            elementType: 'labels.text.fill',\n            stylers: [{color: '#e85113'}]\n        },\n        {\n            featureType: 'transit.station',\n            stylers: [\n                {weight: 7},\n                {hue: '#e85113'}\n            ]\n        },\n        {\n            featureType: 'water',\n            stylers: [{color: '#a1cdfc'}]\n        },\n        {\n            featureType: 'water',\n            elementType: 'labels.text.stroke',\n            stylers: [\n                {lightness: 100}, \n                {saturation: 30}\n            ]\n        },\n        {\n            featureType: 'water',\n            elementType: 'labels.text.fill',\n            stylers: [{lightness: -100}]\n        },\n        {\n            featureType: 'road.highway',\n            elementType: 'geometry',\n            stylers: [\n                {color: '#f49935'},\n                {lightness: -40}\n            ]\n        },\n        {\n            featureType: 'road.highway',\n            elementType: 'geometry.fill',\n            stylers: [\n                {color: '#efe9e4'},\n                {lightness: -25}\n            ]\n        },\n        {\n            featureType: 'poi',\n            elementType: 'geometry',\n            stylers: [\n                {visibility: 'on'},\n                {color: '#f0e4d3'}\n            ]\n        },\n        {\n            featureType: 'road.highway',\n            elementType: 'labels.icon',\n            stylers: [\n                {visibility : 'off'}\n            ]\n        },\n        {\n            featureType: 'road.arterial',\n            elementType: 'geometry.fill',\n            stylers: [\n                {color: '#fad959'},\n                {lightness: 40}\n            ]\n        },\n        {\n            featureType: 'road.arterial',\n            elementType: 'labels.icon',\n            stylers: [\n                {visibility: 'off'}\n            ]\n        }   \n    ]\n\n    map = new google.maps.Map(document.getElementById('map'), {\n        center: {lat:52.3792671, lng:4.902102},\n        zoom: 13,\n        styles: styles,\n        mapTypeId: 'terrain'\n    });\n\n    var textInput = document.getElementById('search');\n    var searchBox = new google.maps.places.SearchBox(textInput);\n\n    // Bias the users SearchBox results towards the current maps viewport.\n    map.addListener('bounds_changed', function() {\n        searchBox.setBounds(map.getBounds());\n    });\n\n    var infoWindow = new google.maps.InfoWindow();\n\n    var defaultIcon;\n    var highlightedIcon;\n\n    searchBox.addListener('places_changed', function() {\n        searchBoxPlaces(this);\n    });\n\n    /* \n     * listen for the click event fired when the \n     *   user selects a place and clicks go for that place.\n    */\n    document.getElementById('button').addEventListener('click', searchPlaces);\n}\n\nfunction searchBoxPlaces(searchBox) {\n    hideMarkers(placeMarkers);\n    var places = searchBox.getPlaces();\n    if (places.length == 0) {\n        return;\n    } else {\n        // for each place, get the icon, name and location.\n        markersForPlaces(places);\n    }\n}\n\n// when the user clicks on 'go', it'd do a nearby search using the inputted place or string.\nfunction searchPlaces() {\n    var bounds = map.getBounds();\n    hideMarkers(placeMarkers);\n    var placesService = new google.maps.places.PlacesService(map);\n    placesService.textSearch({\n        query: document.getElementById('search').value,\n        bounds: bounds\n    }, function(results, status) {\n        if (status === google.maps.places.PlacesServiceStatus.OK) {\n            markersForPlaces(results);\n        }\n    });\n}\n\nfunction hideMarkers(markers) {\n    for (var i = 0; i < markers.length; i++) {\n        markers[i].setMap(null);\n    }\n}\n\n// creates markers\nfunction markersForPlaces(places) {\n    var bounds = new google.maps.LatLngBounds();\n\n    for (var i = 0; i < places.length; i++) {\n        var place = places[i];\n        var icon = {\n            url: place.icon,\n            size: new google.maps.Size(70, 70),\n            origin: new google.maps.Point(0, 0),\n            anchor: new google.maps.Point(17, 34),\n            scaledSize: new google.maps.Size(25, 25)\n        };\n\n        //  creates a marker for each place\n        var marker = new google.maps.Marker( {\n            map: map,\n            icon: icon,\n            animation: google.maps.Animation.DROP,\n            title: place.name,\n            position: place.geometry.location,\n            id: place.place_id\n        });\n\n        var placeInfoWindow = new google.maps.InfoWindow();\n        marker.addListener('click', function() {\n            if (placeInfoWindow.marker == this) {\n                console.log(\"This infowindow is already on this marker\");\n            } else {\n                getPlacesDetails(this, placeInfoWindow);\n            }\n        });\n\n        placeMarkers.push(marker);\n\n        if (place.geometry.viewport) {\n            // only geocodes have viewports\n            bounds.union(place.geometry.viewport);\n        } else {\n            bounds.extend(place.geometry.location);\n        }\n    }\n    map.fitBounds(bounds);\n}\n\nfunction placeMarkers() {}\n\n// for the place details\nfunction getPlacesDetails(marker, infowindow) {\n    var service = new google.maps.places.PlacesService(map);\n    service.getDetails( {\n        placeId: marker.id\n    }, function(place, status) {\n        if (status === google.maps.places.PlacesServiceStatus.OK) {\n            // set the marker property on this infowindow\n            infowindow.marker = marker;\n            var innerHTML = '<div>';\n\n            if (place.name) {\n                innerHTML += '<strong>' + place.name + '</strong>';\n            }\n            if (place.formatted_address) {\n                innerHTML += '<br><br>' + place.formatted_address;\n            }\n            if (place.formatted_phone_number) {\n                innerHTML += '<br>' + place.formatted_phone_number;\n            }\n            if (place.opening_hours) {\n                innerHTML += '<br><br><strong>Hours:</strong><br>' +\n                place.opening_hours.weekday_text[0] + '<br>' +\n                place.opening_hours.weekday_text[1] + '<br>' +\n                place.opening_hours.weekday_text[2] + '<br>' +\n                place.opening_hours.weekday_text[3] + '<br>' +\n                place.opening_hours.weekday_text[4] + '<br>' +\n                place.opening_hours.weekday_text[5] + '<br>' +\n                place.opening_hours.weekday_text[6];\n            }\n            if (place.photos) {\n                innerHTML += '<br><br><img src=\"' + place.photos[0].getUrl(\n                    {maxHeight:200, maxWidth:200}\n                ) + '\">';\n            }\n            innerHTML += '</div>';\n            infowindow.setContent(innerHTML);\n            infowindow.open(map, marker);\n\n            infowindow.addListener('closeclick', function() {\n                infowindow.marker = null;\n            });\n        }\n    });\n}\n\n/* TODO: \n * If more than one photo, make it scrollable with icons such as next and previous\n * Add listings to the listings div\n*/"]}